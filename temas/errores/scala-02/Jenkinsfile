pipeline {
    agent {
        // Indica a Jenkins que use una imagen Docker específica como agente.
        // Aquí usamos la imagen que acabamos de construir.
        docker {
            image 'scala-option-example:latest'
            // Opcional: Si necesitas bind-mounts o credenciales, se configurarían aquí.
            // Por ejemplo, para montar el directorio de trabajo actual:
            // args '-v $PWD:/app --workdir /app'
            // Sin embargo, en el Jenkinsfile default, el workspace ya se monta.
        }
    }

    stages {
        stage('Compile') {
            steps {
                // Como el contenedor Docker ya tiene el WORKDIR en /app
                // y los archivos de proyecto están copiados, no necesitamos `dir()`.
                // sbt y Scala ya están en el PATH dentro de ese contenedor.
                echo 'Compilando el proyecto Scala en el contenedor Docker...'
                sh 'sbt compile'
            }
        }

        stage('Test') {
            steps {
                echo 'Ejecutando pruebas automatizadas en el contenedor Docker...'
                sh 'sbt test'
            }
        }
    }

    post {
        success {
            echo 'Pipeline completado con éxito'
        }
        failure {
            echo 'Algo falló en la ejecución del pipeline'
            // Opcional: Aquí podrías añadir acciones para errores, como enviar notificaciones.
        }
        always {
            // Esto se ejecuta siempre, independientemente del resultado del stage.
            echo 'Limpieza de recursos si es necesaria...'
            // Por ejemplo, si generaste algún artefacto que necesites limpiar.
        }
    }
}